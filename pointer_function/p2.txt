#include <stdio.h>

void test_func(int v, int *p, int q[])
{
	v += 6;
	*p += 7;
	q[1] += 8;

	return;
}





test_func:
        pushl   %ebp                ; Save the base pointer of the caller
        movl    %esp, %ebp          ; Set the base pointer to the current stack pointer

                                    ; v += 6;
        addl    $6, 8(%ebp)         ; Add 6 to the first argument (v)

                                    ; *p += 7;
        movl    12(%ebp), %eax      ; Load the address of the second argument (p) into %eax
        movl    (%eax), %eax        ; Dereference the pointer to get the value of *p
        leal    7(%eax), %edx       ; Add 7 to the value of *p and store the result in %edx
        movl    12(%ebp), %eax      ; Load the address of the second argument (p) into %eax again
        movl    %edx, (%eax)        ; Store the result back into *p


                                    ; q[1] += 8;
        movl    16(%ebp), %eax      ; Load the address of the third argument (q) into %eax
        addl    $4, %eax            ; Move to the second element of the array q (q[1])
        movl    16(%ebp), %edx      ; Load the address of the third argument (q) into %edx
        addl    $4, %edx            ; Move to the second element of the array q (q[1])
        movl    (%edx), %edx        ; Load the value of q[1] into %edx
        addl    $8, %edx            ; Add 8 to the value of q[1]
        movl    %edx, (%eax)        ; Store the result back into q[1]
        nop                         
        popl    %ebp                ; Restore the base pointer of the caller
        ret                         ; Return from the function

int main(void) 
{
	int a = 1, b = 2;
	int c[3] = {3, 4, 5};

	test_func(a, &b, c);

        printf("%d %d %d\n", a, b, c[1]);
    
    return 0;
}

main:
        pushl   %ebp                ; Save the base pointer of the caller
        movl    %esp, %ebp          ; Set the base pointer to the current stack pointer
        subl    $44, %esp           ; Allocate 44 bytes on the stack for local variables

        movl    $1, -4(%ebp)        ; a = 1;    Initialize local variable a with 1
        movl    $2, -8(%ebp)        ; b = 2;    Initialize local variable b with 2
        movl    $3, -20(%ebp)       ; c[0] = 3; Initialize the first element of array c with 3
        movl    $4, -16(%ebp)       ; c[1] = 4; Initialize the second element of array c with 4
        movl    $5, -12(%ebp)       ; c[2] = 5; Initialize the third element of array c with 5

        leal    -20(%ebp), %eax     ; test_func(a, &b, c)   Load the address of the first element of array c into %eax
        movl    %eax, 8(%esp)       ; Pass the address of c as the third argument to test_func
        leal    -8(%ebp), %eax      ; Load the address of b into %eax
        movl    %eax, 4(%esp)       ; Pass the address of b as the second argument to test_func
        movl    -4(%ebp), %eax      ; Load the value of a into %eax
        movl    %eax, (%esp)        ; Pass the value of a as the first argument to test_func
        call    test_func           ; Call the function test_func
        movl    $0, %eax            ; Set the return value of main to 0
        leave                       ; Restore the base pointer and stack pointer
        ret                         ; Return from the function