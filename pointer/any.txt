//code1:

int main(void)
{
    int a=1;
    int *p=&a;
    return 0;
}


//

int main(void){
    int a = 1;
    int *p = &a;
    int b = 2;
    char *str = "BDCOM";
    int array[3] = {1，2，3};
    int *q = array;

    return 0;
}

// assembly of this code 
/*
LCO:
    .string "BDCOM"
    .text
main:
    pushl %ebp
    movl %esp，%ebp
    subl $32，%esp
    movl $1，-4(%ebp)
    leal -4(%ebp)，%eax
    movl %eax，-8(%ebp)
    movl $2，-12(%ebp)
    movl $.LC0，-16(%ebp)
    movl $1，-32(%ebp)
    movl $2，-28(%ebp)
    movl $3，-24(%ebp)
    leal -32(%ebp)，%eax
    movl %eax，-20(%ebp)
    movl $0，%eax
    leave
    ret
*/


LC0:
    .string "BDCOM"       ; Stores the string "BDCOM" in the read-only section
    .text                 ; Start of text (code) section
main:
    pushl %ebp            ; Save old base pointer
    movl %esp, %ebp       ; Set new base pointer
    subl $32, %esp        ; Allocate 32 bytes of stack space for local variable

    movl $1, -4(%ebp)     ; a = 1;
    leal -4(%ebp), %eax   ; Load address of a into EAX
    movl %eax, -8(%ebp)   ; int *p = &a;

    movl $2, -12(%ebp)    ; b = 2
    movl $.LC0, -16(%ebp) ; char *str = "BDCOM"; (string in read-only memory)

    movl $1, -32(%ebp)    ; array[0] = 1;
    movl $2, -28(%ebp)    ; array[1] = 2;
    movl $3, -24(%ebp)    ; array[2] = 3;

    leal -32(%ebp), %eax  ; Load address of array[0] into EAX
    movl %eax, -20(%ebp)  ; int *q = array;

    movl $0, %eax         ; return 0
    leave                 ; Restore stack
    ret                   ; Return to caller



