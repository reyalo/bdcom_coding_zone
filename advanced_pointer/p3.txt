Core Scenarios Where Double Pointers are Used
1. Dynamic 2D Arrays
    int **matrix = malloc(rows * sizeof(int *));
    for(int i = 0; i < rows; i++) {
        matrix[i] = malloc(cols * sizeof(int));
    }


2. Modifying Pointer in Functions
    void modify_ptr(int **ptr) {
        *ptr = malloc(sizeof(int));
        **ptr = 10;
    }


3. String Arrays (Command Line Args)
    int main(int argc, char **argv) {
        // char *names[] = {"John", "Jane", "Bob"};
    }


4. Linked List Operations
    void insert(Node **head, int data) {
        Node *new = malloc(sizeof(Node));
        new->next = *head;
        *head = new;
    }


5. Memory Management
    void free_array(int **arr, int rows) {
        for(int i = 0; i < rows; i++) {
            free(arr[i]);
        }
        free(arr);
    }



6. Buffer Management
    void resize_buffer(char **buf, size_t *size) {
        *buf = realloc(*buf, *size * 2);
        *size *= 2;
    }


1. For variable a (integer) : 
    *a - Invalid operation. Cannot dereference a non-pointer variable
    **a - Invalid operation. Cannot double dereference a non-pointer variable
2. For pointer p (pointer to int) :
    *p - Value at address stored in p (value of a = 2)
    **p - Invalid operation. Cannot double dereference a single pointer
3. For pointer q (pointer to pointer) :
    *q - Value at address stored in q (address of a)
    **q - Value at address obtained after double dereferencing (value of a = 2)


    # Learning Points from Pointer Program

### 1. Variable Declarations and Initialization
```c
int a = 2;          // Regular integer
int *p = &a;        // Pointer to int
int **q = &p;       // Pointer to pointer to int
int **p1 = &a;      // Warning: Incompatible types
int *p2 = &p;       // Pointer to pointer
```

### 2. Type Casting and Pointer Operations
- The program demonstrates type casting with pointers:
```c
printf("%d %d\n", *p1, **(int **)p2);
```
- `(int **)p2`: Casting `p2` to a pointer-to-pointer type
- This is a potentially dangerous operation as it can lead to type mismatch issues

### 3. Key Concepts Demonstrated

| Variable | Type | Points To | Warning |
|----------|------|-----------|----------|
| a | int | value 2 | - |
| p | int* | address of a | - |
| q | int** | address of p | - |
| p1 | int** | address of a | Type mismatch! |
| p2 | int* | address of p | - |

### 4. Common Mistakes Shown
1. Type mismatch in pointer declarations:
   - `int **p1 = &a;` is incorrect (incompatible pointer types)
   - Should be: `int **p1 = &p;`

### 5. How to Fix
````c
#include <stdio.h>
#include <stdlib.h>

int main(void) {
    int a = 2;
    int *p = &a;
    int **q = &p;
    int **p1 = &p;    // Corrected: Now points to p instead of a
    int *p2 = &p;
    
    printf("Value: %d %d\n", **p1, **(int **)p2);
    return 0;
}
````

### 6. Compilation in VS Code Terminal
```bash
gcc 2.c -o 2
.\2
```

### 7. Best Practices
1. Avoid type casting pointers unless absolutely necessary
2. Maintain proper pointer hierarchy
3. Always match pointer levels with variable types
4. Initialize pointers before use
5. Check for NULL before dereferencing

These concepts are fundamental for understanding pointer manipulation and memory management in C.